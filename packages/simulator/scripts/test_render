#!/usr/bin/env python3
import logging
import os
import time

import matplotlib.pyplot as plt
import yaml

from apriltag_simulator.Camera import Camera
from apriltag_simulator.Scene import Scene
from apriltag_simulator.lenses import FishEyeLens
from apriltag_simulator.objects import Rectangle3, TexturedRectangle3

logging.basicConfig()
logger = logging.getLogger('test_render')
logger.setLevel(logging.DEBUG)

TAG_ID = 0
RECT_W_M = 0.1
RECT_H_M = 0.1

# TAG_RATIO = 0.8
DEBUG = True

DATA_DIR = os.path.join(os.path.abspath(os.path.dirname(__file__)), '..', '..', 'data')
SIM_DATA_DIR = os.path.join(DATA_DIR, 'simulator')
TAG_IMG = os.path.join(SIM_DATA_DIR, 'tags', 'tag%d.png' % TAG_ID)
GRID_IMG = os.path.join(SIM_DATA_DIR, 'misc', 'grid.png')
CAMERA_NAME = 'autobot04'
# CAMERA_NAME = 'crazy'
# CAMERA_NAME = 'pinhole'
# CAMERA_NAME = 'camera_0001'

formatted = lambda f: ('%.2f' % f).rstrip('0').rstrip('.')

camera_info_file = os.path.join(DATA_DIR, 'calibration', f'{CAMERA_NAME}.yaml')
# camera_info_file = os.path.join(DATA_DIR, 'webcrawl_data', 'raw', f'{CAMERA_NAME}.yaml')
camera_info = yaml.load(open(camera_info_file, 'rt'), Loader=yaml.SafeLoader)

camera = Camera.from_camera_info('camera1', camera_info)

lens = FishEyeLens.from_camera_info('lens1', camera, camera_info)
camera.attach_lens(lens)

print(f'Lens[{lens.name}] Max Distortion: {lens.maximum_distortion()}px')

xyz = [0, 0, 0.07]
rpy = [0, 0, 0]

obj = TexturedRectangle3('tag0', TAG_IMG, [RECT_W_M, RECT_H_M], xyz, rpy)
grid = TexturedRectangle3('grid', GRID_IMG, [2, 2], [0, 0, 0.7], [0, 0, 0])
# obj = Rectangle3('tag0', [RECT_W_M, RECT_H_M], 255, xyz, rpy)
scene = Scene('scene1')
scene.add(obj)
# scene.add(grid)

stime = time.time()
img = camera.render(scene, bgcolor=125, progress=True)
logger.debug('Rendered in {} secs'.format(int(time.time() - stime)))

if DEBUG:
    imgplot = plt.imshow(img.transpose((1, 0, 2)))
    plt.show()


# stime = time.time()
# img = camera.render2(scene, bgcolor=125, progress=True)
# logger.debug('Rendered in {} secs'.format(int(time.time() - stime)))
#
# if DEBUG:
#     imgplot = plt.imshow(img.transpose((1, 0, 2)))
#     plt.show()

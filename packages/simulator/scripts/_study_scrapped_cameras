#!/usr/bin/env python3

import os
import json
import yaml
import glob
import time
import logging
import numpy as np
import matplotlib.pyplot as plt

from apriltag_simulator.Camera import Camera
from apriltag_simulator.Scene import Scene
from apriltag_simulator.lenses import FishEyeLens
from apriltag_simulator.objects import Rectangle3

logging.basicConfig()
logger = logging.getLogger('study_scrapped_cameras')
logger.setLevel(logging.DEBUG)


DATA_DIR = os.path.join(os.path.abspath(os.path.dirname(__file__)), '..', '..', 'data')
WEBCRAWL_DATA_DIR = os.path.join(DATA_DIR, 'webcrawl_data')
WEBCRAWL_RAW_DATA_DIR = os.path.join(WEBCRAWL_DATA_DIR, 'raw')
WEBCRAWL_RENDERINGS_DATA_DIR = os.path.join(WEBCRAWL_DATA_DIR, 'renderings')
DISTORTION_PARAM_NAMES = ['k1', 'k2', 'p1', 'p2', 'k3']
FORCE_RANGE = 1.0

TAG_ID = 0
LINE_LEN_M = 1.0
RECT_Z = 0.2
DEBUG = False

CAMERAS = glob.glob(os.path.join(WEBCRAWL_RAW_DATA_DIR, f'camera_*.yaml'))


def get_camera_info(_camera_no: int):
    local_yaml = os.path.join(WEBCRAWL_RAW_DATA_DIR, f'camera_{str(_camera_no).zfill(4)}.yaml')
    with open(local_yaml, 'r') as fin:
        return yaml.full_load(fin)

tot_cameras = no_cameras = len(CAMERAS)
valid_cameras = {}
camera_infos = {}

# load cameras
for camera_no in range(1, len(CAMERAS)+1, 1):
    camera_infos[camera_no] = get_camera_info(camera_no)
print(f'{len(CAMERAS)} cameras loaded.')

# filter cameras (invalid disto coeffs)
camera_infos = {
    k: c for k, c in camera_infos.items()
    if len(c['distortion_coefficients']['data']) == 5
}
no_cameras = len(camera_infos)
print(f'{tot_cameras - no_cameras} cameras had invalid distortion coeffs list, {no_cameras} remaining.')
tot_cameras = no_cameras

# filter cameras (null distortion models)
camera_infos = {
    k: c for k, c in camera_infos.items()
    if np.sum(np.absolute(c['distortion_coefficients']['data'])) != 0
    and len([v for v in c['distortion_coefficients']['data'] if abs(v) > FORCE_RANGE]) == 0
}
no_cameras = len(camera_infos)
print(f'{tot_cameras - no_cameras} cameras had zero distortion models, {no_cameras} remaining.')
tot_cameras = no_cameras

# convert D back to numpy array
D = np.array([c['distortion_coefficients']['data'] for c in camera_infos.values()])

# compute mean and stddev
Davg = np.mean(D, axis=0)
Dstd = np.std(D, axis=0)
assert Davg.shape == (5,)
assert Dstd.shape == (5,)
for i in range(5):
    print(f'{DISTORTION_PARAM_NAMES[i]}: {np.round(Davg[i], 3)}  +/-  {np.round(Dstd[i], 3)}')

# k1 = np.linspace(0.1, -0.8, 100)
# k2 = 0.019 * k1 + 0.805 * (k1 ** 2)
# plt.plot(k1, k2)
# plt.scatter(D[:, 0], D[:, 1])
# plt.show()
#
# for i in range(5):
#     imgplot = plt.hist(D[:, i], bins=20)
#     plt.title(DISTORTION_PARAM_NAMES[i])
#     plt.show()

# compute maximum distortion
y_span = 0.4
y_step = 0.04
Y = list(np.arange(-y_span, y_span, y_step).tolist())

scene = Scene('scene1')
no_lines = len(Y) * 2
i = 0
for y in Y:
    rpy = [0, 0, 0]
    # horizontal
    xyz = [0, y, RECT_Z]
    obj = Rectangle3(f'grid{i}/{no_lines}', [LINE_LEN_M, 0.0004], 0, xyz, rpy)
    scene.add(obj)
    i += 1
    # vertical
    xyz = [y, 0, RECT_Z]
    obj = Rectangle3(f'grid{i}/{no_lines}', [0.0004, LINE_LEN_M], 0, xyz, rpy)
    scene.add(obj)
    i += 1

maxD = 0
os.makedirs(WEBCRAWL_RENDERINGS_DATA_DIR, exist_ok=True)

# for camera_no in range(1, len(CAMERAS) + 1, 1):
for camera_no in sorted(camera_infos.keys()):
    print(f'Camera {camera_no}:')
    camera_info = camera_infos[camera_no]
    out_json = os.path.join(WEBCRAWL_RENDERINGS_DATA_DIR, f'camera_{str(camera_no).zfill(4)}.json')
    out_png = os.path.join(WEBCRAWL_RENDERINGS_DATA_DIR, f'camera_{str(camera_no).zfill(4)}.png')

    if os.path.isfile(out_json):
        logger.debug('[{}/{}]: Using cached.'.format(camera_no, len(CAMERAS)))
        continue

    camera = Camera.from_camera_info('camera1', camera_info)
    lens = FishEyeLens.from_camera_info('lens1', camera_info)
    camera.attach_lens(lens)

    stime = time.time()
    img, stats = camera.render(scene, bgcolor=125, scream=False, progress=True, refine=False, return_stats=True)
    ftime = time.time()
    logger.debug('[{}/{}]: Rendered in {} secs'.format(camera_no, len(CAMERAS), int(ftime - stime)))

    plt.imsave(out_png, img.transpose((1, 0, 2)))
    json.dump(stats, open(out_json, 'wt'), indent=4, sort_keys=True)

    maxD = max(maxD, stats['max_distortion_px'] / camera_info['image_width'])

    print(f'Camera {camera_no} max distortion: {maxD}')
print(f'Global Max Distortion: {maxD}')

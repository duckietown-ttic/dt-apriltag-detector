#!/usr/bin/env python3

import os
import sys
import cv2
import time
import logging
import imageio
import numpy as np
import matplotlib.pyplot as plt
from signal import signal, SIGINT

from apriltag_simulator.Camera import Camera
from apriltag_simulator.Scene import Scene
from apriltag_simulator.objects import TexturedRectangle3

from constants import \
    DATA_DIR, \
    grid_filepath, \
    empty_pixel, \
    tag_size, tag_texture, \
    roll, pitch, yaw, \
    X, Y, Z, \
    generate_camera_info

logging.basicConfig()
logger = logging.getLogger('render_undistorted_images')
logger.setLevel(logging.DEBUG)


DEBUG = False
PRODUCE_IMAGES = True
APPLY_BACKGROUND = False
REPLACE_IF_EXISTS = False
formatted = lambda _f: ('%.2f' % _f).rstrip('0').rstrip('.')

# create camera
pinhole_camera_info = generate_camera_info()
camera = Camera.from_camera_info('camera1', pinhole_camera_info)

# create file mappings
RENDERING_DATA_DIR = os.path.join(
    DATA_DIR, 'renderings', 'undistorted', f'{camera.width}x{camera.height}')
OUT_FILEPATH = lambda _x, _y, _z, _r, _p, _w: \
    os.path.join(
        RENDERING_DATA_DIR,
        f'z_{formatted(_z)}', f'x_{formatted(_x)}', f'y_{formatted(_y)}',
        f'r_{formatted(_r)}', f'p_{formatted(_p)}', f'w_{formatted(_w)}.png'
    )

# create scene
scene = Scene('scene1')

# create objects
tag = TexturedRectangle3('tag1', tag_texture, [tag_size, tag_size])
scene.add(tag)

# load background
bground = cv2.imread(grid_filepath)
bground = cv2.resize(bground, dsize=(camera.width, camera.height), interpolation=cv2.INTER_CUBIC)
bground = bground.transpose((1, 0, 2))

# provide a clean way of stopping
_sigint_handler = lambda *_: sys.exit(0)
signal(SIGINT, _sigint_handler)


# define rendering function
def render(_x, _y, _z, _r, _p, _w):
    logger.debug('Rendering:'
                 '\n\t- resolution  [%d, %d]' % (camera.width, camera.height) +
                 '\n\t- position    [%.2f, %.2f, %.2f]' % (_x, _y, _z) +
                 '\n\t- orientation [%.2f, %.2f, %.2f]' % (_r, _p, _w))
    # compile file name
    filepath = OUT_FILEPATH(_x, _y, _z, _r, _p, _w)
    # check if the file exists
    if (not REPLACE_IF_EXISTS) and os.path.isfile(filepath):
        logger.debug('File already exists. Skipping.')
        return
    # ---
    tag_xyz = [_x, _y, _z]
    tag_rpw = [np.deg2rad(_r), np.deg2rad(_p), np.deg2rad(_w)]
    # move the tag to the current position
    tag.set_position(tag_xyz)
    tag.set_orientation(tag_rpw)
    # render
    stime = time.time()
    img = camera.render(scene, bgcolor=empty_pixel)
    if APPLY_BACKGROUND:
        img = np.ma.where(img == empty_pixel, bground, img)
    logger.debug('Rendered in {} secs'.format(int(time.time() - stime)))
    # ---
    if DEBUG:
        # show image
        plt.imshow(img.transpose((1, 0, 2)))
        plt.show()
    # ---
    if PRODUCE_IMAGES:
        logger.info('Saving image to disk...')
        # compile file name
        filedir = os.path.dirname(filepath)
        os.makedirs(filedir, exist_ok=True)
        # save rendering to disk
        imageio.imsave(filepath, img.transpose((1, 0, 2)))
        logger.info('Done!')
    # ---
    print()


# render all images
for z in Z:
    for x in X(z):
        for y in Y(z):
            for r in roll:
                for p in pitch:
                    for w in yaw:
                        render(x, y, z, r, p, w)

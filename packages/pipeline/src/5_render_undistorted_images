#!/usr/bin/env python3

import os
import time
import logging
import imageio
import numpy as np
import matplotlib.pyplot as plt

from apriltag_simulator.Camera import Camera
from apriltag_simulator.Scene import Scene
from apriltag_simulator.objects import TexturedRectangle3

from constants import \
    DATA_DIR, \
    tag_size, tag_texture, \
    roll, pitch, yaw, \
    k1, k2, p1, p2, k3, \
    X, Y, Z, \
    pinhole_camera_info

logging.basicConfig()
logger = logging.getLogger('sandbox')
logger.setLevel(logging.DEBUG)

DEBUG = True
formatted = lambda f: ('%.2f' % f).rstrip('0').rstrip('.')

RENDERING_DATA_DIR = os.path.join(DATA_DIR, 'renderings')
OUT_FILEPATH = lambda _x, _y, _z, _r, _p, _w: \
    os.path.join(
        RENDERING_DATA_DIR,
        f'z_{formatted(_z)}', f'x_{formatted(_x)}', f'y_{formatted(_y)}',
        f'r_{formatted(_r)}', f'p_{formatted(_p)}', f'w_{formatted(_w)}.png'
    )

camera = Camera.from_camera_info('camera1', pinhole_camera_info)

tag = TexturedRectangle3('tag1', tag_texture, [tag_size, tag_size])
scene = Scene('scene1')
scene.add(tag)

x, y, z, r, p, w = 0, 0, 0, 0, 0, 0

for z in Z():
    for x in X(z, camera):
        for y in Y(z, camera):
            tag_xyz = [x, y, z]
            for r in roll:
                for p in pitch:
                    for w in yaw:
                        tag_rpw = [np.deg2rad(r), np.deg2rad(p), np.deg2rad(w)]
                        # move the tag to the current position
                        tag.set_position(tag_xyz)
                        tag.set_orientation(tag_rpw)
                        # render
                        stime = time.time()
                        img = camera.render(scene, bgcolor=0)
                        logger.debug('Rendered in {} secs'.format(int(time.time() - stime)))
                        # show image in debug
                        if DEBUG:
                            imgplot = plt.imshow(img.transpose((1, 0, 2)))
                            plt.show()
                        # compile file name
                        filepath = OUT_FILEPATH(x, y, z, r, p, w)
                        filedir = os.path.dirname(filepath)
                        os.makedirs(filedir, exist_ok=True)
                        # save rendering to disk
                        imageio.imsave(filepath, img.transpose((1, 0, 2)))

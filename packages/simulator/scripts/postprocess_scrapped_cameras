#!/usr/bin/env python3

import os
import json
import time

import yaml
import glob
import pickle
import logging
import numpy as np
import imageio

from apriltag_simulator.Camera import Camera
from apriltag_simulator.Scene import Scene
from apriltag_simulator.lenses import FishEyeLens
from apriltag_simulator.objects import TexturedRectangle3

logging.basicConfig()
logger = logging.getLogger('study_maximum_distortion')
logger.setLevel(logging.DEBUG)

DATA_DIR = os.path.join(os.path.abspath(os.path.dirname(__file__)), '..', '..', 'data')
SIM_DATA_DIR = os.path.join(DATA_DIR, 'simulator')
GRID_IMG = os.path.join(SIM_DATA_DIR, 'misc', 'grid.png')
WEBCRAWL_DATA_DIR = os.path.join(DATA_DIR, 'webcrawl_data')
WEBCRAWL_RAW_DATA_DIR = os.path.join(WEBCRAWL_DATA_DIR, 'raw')
WEBCRAWL_STATS_DATA_DIR = os.path.join(WEBCRAWL_DATA_DIR, 'stats')
WEBCRAWL_LENS_DATA_DIR = os.path.join(WEBCRAWL_DATA_DIR, 'lens')
WEBCRAWL_RENDERINGS_DATA_DIR = os.path.join(WEBCRAWL_DATA_DIR, 'renderings')
FORCE_RANGE = 1.0
TARGET_CAMERA_WIDTH = 640
DEBUG = False

CAMERAS = glob.glob(os.path.join(WEBCRAWL_RAW_DATA_DIR, f'camera_*.yaml'))


def get_camera_info(_camera_no: int):
    local_yaml = os.path.join(WEBCRAWL_RAW_DATA_DIR, f'camera_{str(_camera_no).zfill(4)}.yaml')
    with open(local_yaml, 'r') as fin:
        return yaml.full_load(fin)

tot_cameras = no_cameras = len(CAMERAS)
valid_cameras = {}
camera_infos = {}

# load cameras
for camera_no in range(1, len(CAMERAS)+1, 1):
    camera_infos[camera_no] = get_camera_info(camera_no)
print(f'{len(CAMERAS)} cameras loaded.')

# filter cameras (invalid disto coeffs)
camera_infos = {
    k: c for k, c in camera_infos.items()
    if len(c['distortion_coefficients']['data']) == 5
}
no_cameras = len(camera_infos)
print(f'{tot_cameras - no_cameras} cameras had invalid distortion coeffs list, {no_cameras} remaining.')
tot_cameras = no_cameras

# filter cameras (null distortion models)
camera_infos = {
    k: c for k, c in camera_infos.items()
    if np.sum(np.absolute(c['distortion_coefficients']['data'])) != 0
    and len([v for v in c['distortion_coefficients']['data'] if abs(v) > FORCE_RANGE]) == 0
}
no_cameras = len(camera_infos)
print(f'{tot_cameras - no_cameras} cameras had zero distortion models, {no_cameras} remaining.')
tot_cameras = no_cameras
print(f'{no_cameras} will be processed.')

# create scene
scene = Scene('scene1')
grid = TexturedRectangle3('grid', GRID_IMG, [3, 3], [0, 0, 0.8], [0, 0, 0])
scene.add(grid)

os.makedirs(WEBCRAWL_STATS_DATA_DIR, exist_ok=True)
os.makedirs(WEBCRAWL_LENS_DATA_DIR, exist_ok=True)
os.makedirs(WEBCRAWL_RENDERINGS_DATA_DIR, exist_ok=True)

for camera_no in sorted(camera_infos.keys()):
    print(f'\nCamera {camera_no}:')
    camera_info = camera_infos[camera_no]

    # adjust camera parameters to the target resolution
    scale = TARGET_CAMERA_WIDTH / camera_info['image_width']
    camera_info['image_width'] = int(camera_info['image_width'] * scale)
    camera_info['image_height'] = int(camera_info['image_height'] * scale)
    C = np.array(camera_info['camera_matrix']['data']) * scale
    C[-1] = 1
    camera_info['camera_matrix']['data'] = C.tolist()

    out_json = os.path.join(WEBCRAWL_STATS_DATA_DIR, f'camera_{str(camera_no).zfill(4)}.json')
    out_pickle = os.path.join(WEBCRAWL_LENS_DATA_DIR, f'camera_{str(camera_no).zfill(4)}.pickle')
    out_png = os.path.join(WEBCRAWL_RENDERINGS_DATA_DIR, f'camera_{str(camera_no).zfill(4)}.png')

    if os.path.isfile(out_json):
        logger.debug('[{}/{}]: Using cached.'.format(camera_no, len(CAMERAS)))
        continue

    camera = Camera.from_camera_info('camera1', camera_info)
    lens = FishEyeLens.from_camera_info('lens1', camera, camera_info)
    camera.attach_lens(lens)

    # compute maximum distortion
    print('Computing maximum distortion... ', end='')
    stime = time.time()
    maxD = int(lens.maximum_distortion())
    print(f'{int(time.time() - stime)} secs.')
    print(f'Max distortion: {maxD}')

    # render scene
    print('Rendering sample scene... ', end='')
    stime = time.time()
    img = camera.render(scene, bgcolor=125)
    print(f'{int(time.time() - stime)} secs.')

    print('Serializing lens to file... ', end='')
    stime = time.time()
    with open(out_pickle, 'wb') as fout:
        pickle.dump(lens, fout)
    print(f'{int(time.time() - stime)} secs.')

    print('Storing sample rendering... ', end='')
    stime = time.time()
    imageio.imsave(out_png, img.transpose((1, 0, 2)))
    print(f'{int(time.time() - stime)} secs.')

    print('Storing stats... ', end='')
    stime = time.time()
    with open(out_json, 'w') as fout:
        json.dump({
            'max_distortion': maxD,
            'camera': camera.to_json(),
            'underlying_pinhole_camera': lens.underlying_pinhole_camera.to_json()
        }, fout, sort_keys=True, indent=4)
    print(f'{int(time.time() - stime)} secs.')

    print('Done!')

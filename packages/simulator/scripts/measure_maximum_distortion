#!/usr/bin/env python3

import os
import json
import time

import yaml
import glob
import pickle
import logging
import numpy as np
import imageio

from apriltag_simulator.Camera import Camera
from apriltag_simulator.Scene import Scene
from apriltag_simulator.lenses import FishEyeLens
from apriltag_simulator.objects import TexturedRectangle3

logging.basicConfig()
logger = logging.getLogger('study_maximum_distortion')
logger.setLevel(logging.DEBUG)

DATA_DIR = os.path.join(os.path.abspath(os.path.dirname(__file__)), '..', '..', 'data')
SIM_DATA_DIR = os.path.join(DATA_DIR, 'simulator')
GRID_IMG = os.path.join(SIM_DATA_DIR, 'misc', 'grid.png')
# CALIBRATION_DIR = os.path.join(DATA_DIR, 'webcrawl_data', 'raw')
CALIBRATION_DIR = os.path.join(DATA_DIR, 'calibration')
TARGET_CAMERA_WIDTH = 640
DEBUG = False
RENDER_SCENE = False

CAMERA = 'autobot04'

local_yaml = os.path.join(CALIBRATION_DIR, f'{CAMERA}.yaml')

with open(local_yaml, 'r') as fin:
    camera_info = yaml.full_load(fin)

# create scene
scene = Scene('scene1')
grid = TexturedRectangle3('grid', GRID_IMG, [3, 3], [0, 0, 0.8], [0, 0, 0])
scene.add(grid)

print(f'Camera {CAMERA}:')

# adjust camera parameters to the target resolution
scale = TARGET_CAMERA_WIDTH / camera_info['image_width']
camera_info['image_width'] = int(camera_info['image_width'] * scale)
camera_info['image_height'] = int(camera_info['image_height'] * scale)
C = np.array(camera_info['camera_matrix']['data']) * scale
C[-1] = 1
camera_info['camera_matrix']['data'] = C.tolist()

camera = Camera.from_camera_info('camera1', camera_info)
lens = FishEyeLens.from_camera_info('lens1', camera, camera_info)
camera.attach_lens(lens)

# compute maximum distortion
print('Computing maximum distortion... ', end='')
stime = time.time()
maxD = int(lens.maximum_distortion())
print(f'{int(time.time() - stime)} secs.')
print(f'Max distortion: {maxD}')

# render scene
if RENDER_SCENE:
    print('Rendering sample scene... ', end='')
    stime = time.time()
    img = camera.render(scene, bgcolor=125)
    print(f'{int(time.time() - stime)} secs.')

print('Done!')

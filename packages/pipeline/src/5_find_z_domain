#!/usr/bin/env python3

import sys
import cv2
import time
import logging
import numpy as np
import matplotlib.pyplot as plt
from signal import signal, SIGINT

from apriltag_simulator.Camera import Camera
from apriltag_simulator.Scene import Scene
from apriltag_simulator.objects import TexturedRectangle3

from dt_apriltags import Detector

from constants import \
    grid_filepath, \
    empty_pixel, \
    tag_size, tag_texture, \
    generate_camera_info

logging.basicConfig()
logger = logging.getLogger('find_z_domain')
logger.setLevel(logging.DEBUG)

DEBUG = False

# create camera
pinhole_camera_info = generate_camera_info()
camera = Camera.from_camera_info('camera1', pinhole_camera_info)

# create scene
scene = Scene('scene1')

# create objects
tag = TexturedRectangle3('tag1', tag_texture, [tag_size, tag_size])
scene.add(tag)

# load background
bground = cv2.imread(grid_filepath)
bground = cv2.resize(bground, dsize=(camera.width, camera.height), interpolation=cv2.INTER_CUBIC)
bground = bground.transpose((1, 0, 2))

# create apriltag detector
detector = Detector(quad_decimate=1.0, nthreads=4)

# provide a clean way of stopping
_sigint_handler = lambda *_: sys.exit(0)
signal(SIGINT, _sigint_handler)


# define rendering function
def render(_x, _y, _z, _r, _p, _w):
    logger.debug('Rendering:'
                 '\n\t- resolution  [%d, %d]' % (camera.width, camera.height) +
                 '\n\t- position    [%.2f, %.2f, %.2f]' % (_x, _y, _z) +
                 '\n\t- orientation [%.2f, %.2f, %.2f]' % (_r, _p, _w))
    tag_xyz = [_x, _y, _z]
    tag_rpw = [np.deg2rad(_r), np.deg2rad(_p), np.deg2rad(_w)]
    # move the tag to the current position
    tag.set_position(tag_xyz)
    tag.set_orientation(tag_rpw)
    # render
    stime = time.time()
    img = camera.render(scene, bgcolor=empty_pixel)
    img = np.ma.where(img == empty_pixel, bground, img)
    logger.debug('Rendered in {} secs'.format(int(time.time() - stime)))
    # ---
    if DEBUG:
        # show image
        plt.imshow(img.transpose((1, 0, 2)))
        plt.show()
    return img


z_step = 2
z = 1.5
detected = 0
missed = 0
total = 0
Z = set()

while True:
    if missed >= 3:
        break
    print('Testing z = %.1f' % z)
    img = render(0, 0, z, 0, 0, 0)
    # turn img into grayscale
    img = img[:, :, 0].T
    # run detection
    stime = time.time()
    detection = detector.detect(img)
    ftime = time.time() - stime
    print('Processed in %.5f secs' % ftime)
    # check if detected
    if detection:
        # check if the initial value of z is too high
        if total == 0:
            print('WARNING: Your first image was a HIT, lower the initial value of Z')
            time.sleep(4)
        print('HIT')
        if detected == 0:
            print('min Z: %.1f' % z)
            Z.add(z)
        detected += 1
    else:
        print('MISS')
        if detected > 0:
            missed += 1
    z += z_step
    total += 1
    print()
print('max Z: %.1f' % z)
Z.add(z)

print('Z domain: %s' % str(list(sorted(Z))))


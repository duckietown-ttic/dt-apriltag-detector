#!/usr/bin/env python3
import json
import os
import time
import logging
from itertools import product

import numpy as np
import matplotlib.pyplot as plt

from apriltag_simulator.Camera import Camera
from apriltag_simulator.Scene import Scene
from apriltag_simulator.lenses import FishEyeLens
from apriltag_simulator.objects import Rectangle3

logging.basicConfig()
logger = logging.getLogger('apriltag_simulator')
logger.setLevel(logging.DEBUG)

TAG_ID = 0
LINE_LEN_M = 2.0
RECT_Z = 0.2
DEBUG = False

DATA_DIR = os.path.join(os.path.abspath(os.path.dirname(__file__)), '..', '..', 'data')
SIM_DATA_DIR = os.path.join(DATA_DIR, 'simulator')
SIMULATED_LENSES_DIR = os.path.join(DATA_DIR, 'simulated_camera_models')
GRID_IMG = os.path.join(SIM_DATA_DIR, 'misc', 'grid2.png')

formatted = lambda f: ('%.2f' % f).rstrip('0').rstrip('.')

width, height = 640, 480
fx, fy, cx, cy = width/2, width/2, width/2, height/2

camera = Camera('camera1', fx, fy, cx, cy, width, height)

# generate lenses
K = [-0.4, -0.25, -0.1, 0, 0.1, 0.25, 0.4]
P = [0] #[0, 0.002, 0.005]
K1 = K
K2 = K
K3 = K
P1 = P
P2 = P

lenses = list(product(K1, K2, K3, P1, P2))

print(f'Number of lenses: {len(lenses)}')

lens_no = 0
for lens in lenses:
    # k1, k2, k3, p1, p2 = -0.27, 0.055, 0.001, 0.0004, 0
    k1, k2, k3, p1, p2 = lens

    lens_name = f'k_{np.round(k1, 2)}__{np.round(k2, 2)}__{np.round(k3, 2)}'
    out_dir = os.path.join(SIMULATED_LENSES_DIR, f'p1_{np.round(p1, 3)}__p2_{np.round(p2, 3)}')
    out_json = os.path.join(out_dir, f'{lens_name}.json')

    if os.path.isfile(out_json):
        continue

    lens = FishEyeLens('lens1', k1, k2, k3, p1, p2)

    camera.attach_lens(lens)

    y_span = 0.4
    y_step = 0.04
    Y = list(np.arange(-y_span, y_span, y_step).tolist())

    scene = Scene('scene1')
    no_lines = len(Y) * 2
    i = 0
    for y in Y:
        rpy = [0, 0, 0]
        # horizontal
        xyz = [0, y, RECT_Z]
        obj = Rectangle3(f'grid{i}/{no_lines}', [LINE_LEN_M, 0.0004], 0, xyz, rpy)
        scene.add(obj)
        i += 1
        # vertical
        xyz = [y, 0, RECT_Z]
        obj = Rectangle3(f'grid{i}/{no_lines}', [0.0004, LINE_LEN_M], 0, xyz, rpy)
        scene.add(obj)
        i += 1

    stime = time.time()
    img, stats = camera.render(scene, bgcolor=255, progress=True, refine=False, return_stats=True)
    logger.debug('Rendered in {} secs'.format(int(time.time() - stime)))

    if DEBUG:
        imgplot = plt.imshow(img.transpose((1, 0, 2)))
        plt.show()
    else:
        os.makedirs(out_dir, exist_ok=True)
        min_dist = int(np.round(stats["min_distortion_px"], 0))
        max_dist = int(np.round(stats["max_distortion_px"], 0))
        dFoV = int(np.round(stats["diagonal_fov_deg"], 0))
        out_png = os.path.join(out_dir, f'{lens_name}__dFoV{dFoV}__md{min_dist}__Md{max_dist}.png')
        plt.imsave(out_png, img.transpose((1, 0, 2)))
        json.dump(
            {
                "camera_info": {
                    "image_width": width,
                    "image_height": height,
                    "camera_matrix": {
                        "rows": 3,
                        "cols": 3,
                        "data": [fx, 0, cx, 0, fy, cy, 0, 0, 1]
                    },
                    "distortion_model": "plumb_bob",
                    "distortion_coefficients": {
                        "rows": 1,
                        "cols": 5,
                        "data": [k1, k2, p1, p2, k3]
                    }
                },
                'stats': stats
            },
            open(out_json, 'wt'), indent=4, sort_keys=True
        )

    lens_no += 1
